"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createResponseCacheMiddleware = createResponseCacheMiddleware;

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _constants = require("../constants.js");

var _utils = require("../utils/utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-restricted-syntax */

/**
 * @typedef {object} ResponseCacheMiddlewareConfig
 * @property {import('chokidar').FSWatcher} fileWatcher
 * @property {string} rootDir
 * @property {string[]} extraFileExtensions
 */

/**
 * @typedef {object} CacheEntry
 * @property {string} body
 * @property {object} headers
 * @property {string} filePath
 */

/**
 * Returns 304 response for cacheable requests if etag matches
 * @param {ResponseCacheMiddlewareConfig} cfg
 */
function createResponseCacheMiddleware(cfg) {
  const fileExtensions = [..._constants.baseFileExtensions, ...cfg.extraFileExtensions];
  /** @type {Map<String, String>} */

  const urlForFilePaths = new Map();
  /** @type {import('lru-cache')<string, CacheEntry>} */

  const cache = new _lruCache.default({
    length: (e, key) => e.body.length + key.length,
    max: 52428800,
    // don't call dispose on overwriting
    noDisposeOnSet: true,

    // remove file path -> url mapping when we are no longer caching it
    dispose(url) {
      for (const [filePath, urlForFilePath] of urlForFilePaths.entries()) {
        if (urlForFilePath === url) {
          urlForFilePaths.delete(filePath);
          return;
        }
      }
    }

  }); // remove file from cache on change

  cfg.fileWatcher.addListener('change', e => {
    const filePath = urlForFilePaths.get(e);

    if (filePath) {
      cache.del(filePath);
    }
  });
  /** @type {import('koa').Middleware} */

  async function responseCacheMiddleware(ctx, next) {
    const cached = cache.get(ctx.url);

    if (cached) {
      ctx.body = cached.body;
      ctx.response.set(cached.headers);
      ctx.status = 200;
      return;
    }

    await next();

    if (ctx.method !== 'GET' || !ctx.body) {
      return;
    }

    if (ctx.status !== 200) {
      return;
    }

    const strippedUrl = ctx.url.split('?')[0].split('#')[0];

    if ((0, _utils.isGeneratedFile)(ctx.url) || !fileExtensions.some(ext => strippedUrl.endsWith(ext))) {
      return;
    }

    const body = await (0, _utils.getBodyAsString)(ctx);
    const filePath = (0, _utils.getRequestFilePath)(ctx, cfg.rootDir);
    urlForFilePaths.set(filePath, ctx.url);
    cache.set(ctx.url, {
      body,
      headers: ctx.response.headers,
      filePath
    });
  }

  return responseCacheMiddleware;
}