"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMessageChannelMiddleware = createMessageChannelMiddleware;

var _utils = require("../utils/utils.js");

var _messageChannel = require("../utils/message-channel.js");

var _constants = require("../constants.js");

var _messageChannel2 = _interopRequireDefault(require("../browser-scripts/message-channel.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @typedef {object} MessageChannelMiddlewareConfig
 * @property {string} appIndex
 * @property {string} rootDir
 */

/**
 * Injects message channel script to index.html
 *
 * @param {import('koa').Context} ctx
 */
async function injectMessageChannelScript(ctx) {
  const bodyString = await (0, _utils.getBodyAsString)(ctx);
  const reloadInjected = bodyString.replace('</body>', _messageChannel2.default);
  ctx.body = reloadInjected;
}
/**
 * Creates a message channel middleware, which injects a scripts which sets up a
 * server-sent-event connection with the server. This connection can trigger browser
 * reloads or log error messages.
 *
 * @param {MessageChannelMiddlewareConfig} cfg
 */


function createMessageChannelMiddleware(cfg) {
  /** @type {import('koa').Middleware} */
  async function messageChannelMiddleware(ctx, next) {
    if (ctx.url === _constants.messageChannelEndpoint) {
      (0, _messageChannel.setupMessageChannel)(ctx);
      return;
    }

    await next();

    if (!(await (0, _utils.isIndexHTMLResponse)(ctx, cfg.appIndex))) {
      return;
    }

    await injectMessageChannelScript(ctx);
  }

  return messageChannelMiddleware;
}