"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTransformedIndexHTML = getTransformedIndexHTML;

var _index = require("@open-wc/building-utils/index-html/index.js");

var _constants = require("../constants.js");

var _systemJsLegacyResolve = _interopRequireDefault(require("../browser-scripts/system-js-legacy-resolve.js"));

var _polyfills = require("./polyfills.js");

var _importMaps = require("./import-maps.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * transforms index.html, extracting any modules and import maps and adds them back
 * with the appropriate polyfills, shims and a script loader so that they can be loaded
 * at the right time
 * @param {string} indexUrl
 * @param {string} indexHTMLString
 * @param {string} compatibilityMode
 */
function getTransformedIndexHTML(indexUrl, indexHTMLString, compatibilityMode) {
  // extract input files from index.html
  const resources = (0, _index.extractResources)(indexHTMLString, {
    removeImportMaps: false
  });
  /** @type {Map<string, string>} */

  const inlineModules = new Map();
  resources.inlineModules.forEach((content, i) => {
    inlineModules.set(`inline-module-${i}.js`, content);
  });
  const files = [...resources.jsModules, ...[...inlineModules.keys()].map(e => `${e}?source=${encodeURIComponent(indexUrl)}`)];

  if (files.length === 0) {
    return {
      indexHTML: indexHTMLString,
      inlineModules: new Map(),
      polyfills: []
    };
  } // create a new index.html with injected polyfills and loader script


  const createResult = (0, _index.createIndexHTML)(resources.indexHTML, {
    entries: {
      type: 'module',
      files
    },
    legacyEntries: compatibilityMode !== _constants.compatibilityModes.ALL ? undefined : {
      type: 'system',
      files
    },
    polyfills: (0, _polyfills.getPolyfills)(compatibilityMode),
    minify: false,
    preload: false
  });
  let {
    indexHTML
  } = createResult;
  indexHTML = (0, _importMaps.addPolyfilledImportMaps)(indexHTML, compatibilityMode, resources); // inject systemjs resolver which appends a query param to trigger es5 compilation

  if (compatibilityMode === _constants.compatibilityModes.ALL) {
    indexHTML = indexHTML.replace('</body>', `${_systemJsLegacyResolve.default}</body>`);
  }

  return {
    indexHTML,
    inlineModules,
    polyfills: createResult.files
  };
}