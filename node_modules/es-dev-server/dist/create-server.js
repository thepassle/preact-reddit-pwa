"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createServer = createServer;

var _koa = _interopRequireDefault(require("koa"));

var _path = _interopRequireDefault(require("path"));

var _http = _interopRequireDefault(require("http"));

var _http2 = _interopRequireDefault(require("http2"));

var _fs = _interopRequireDefault(require("fs"));

var _createMiddlewares = require("./create-middlewares.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a koa server with middlewares, but does not start it. Returns the koa app and
 * http server instances.
 *
 * @param {import('./config').InternalConfig} cfg the server configuration
 * @param {import('chokidar').FSWatcher} fileWatcher
 * @returns {{ app: import('koa'), server: import('http').Server | import('http2').Http2SecureServer }}
 */
function createServer(cfg, fileWatcher) {
  const middlewares = (0, _createMiddlewares.createMiddlewares)(cfg, fileWatcher);
  const app = new _koa.default();
  middlewares.forEach(middleware => {
    app.use(middleware);
  });
  let server;

  if (cfg.http2) {
    const dir = _path.default.join(__dirname, '..');

    const options = {
      key: _fs.default.readFileSync(_path.default.join(dir, '.self-signed-dev-server-ssl.key')),
      cert: _fs.default.readFileSync(_path.default.join(dir, '.self-signed-dev-server-ssl.cert')),
      allowHTTP1: true
    };
    server = _http2.default.createSecureServer(options, app.callback());
  } else {
    server = _http.default.createServer(app.callback());
  }

  return {
    server,
    app
  };
}