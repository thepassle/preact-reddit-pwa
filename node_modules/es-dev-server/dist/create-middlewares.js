"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMiddlewares = createMiddlewares;

var _koaStatic = _interopRequireDefault(require("koa-static"));

var _koaEtag = _interopRequireDefault(require("koa-etag"));

var _basePath = require("./middleware/base-path.js");

var _historyApiFallback = require("./middleware/history-api-fallback.js");

var _compileMiddleware = require("./middleware/compile-middleware.js");

var _watchServedFiles = require("./middleware/watch-served-files.js");

var _transformIndexHtml = require("./middleware/transform-index-html.js");

var _messageChannel = require("./middleware/message-channel.js");

var _etagCacheMiddleware = require("./middleware/etag-cache-middleware.js");

var _responseCacheMiddleware = require("./middleware/response-cache-middleware.js");

var _setupBrowserReload = require("./utils/setup-browser-reload.js");

var _constants = require("./constants.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates middlewares based on the given configuration. The middlewares can be
 * used by a koa server using `app.use()`:
 *
 * @param {import('./config').InternalConfig} config the server configuration
 * @param {import('chokidar').FSWatcher} fileWatcher
 * @returns {import('koa').Middleware[]}
 */
function createMiddlewares(config, fileWatcher) {
  const {
    rootDir,
    appIndex,
    appIndexDir,
    basePath,
    moduleDirectories,
    nodeResolve,
    preserveSymlinks,
    readUserBabelConfig,
    customBabelConfig,
    watch,
    extraFileExtensions,
    compatibilityMode,
    babelExclude,
    babelModernExclude,
    watchDebounce,
    customMiddlewares
  } = config;
  /** @type {import('koa').Middleware[]} */

  const middlewares = [];

  if (!Object.values(_constants.compatibilityModes).includes(compatibilityMode)) {
    throw new Error(`Unknown compatibility mode: ${compatibilityMode}. Must be one of: ${Object.values(_constants.compatibilityModes)}`);
  }

  const setupBabel = customBabelConfig || [_constants.compatibilityModes.ALL, _constants.compatibilityModes.MODERN].includes(compatibilityMode) || readUserBabelConfig;
  const setupCompatibility = compatibilityMode && compatibilityMode !== _constants.compatibilityModes.NONE;
  const setupTransformIndexHTML = nodeResolve || setupBabel || setupCompatibility;
  const setupHistoryFallback = appIndex;
  const setupMessageChanel = nodeResolve || watch || setupBabel; // strips a base path from requests

  if (config.basePath) {
    middlewares.push((0, _basePath.createBasePathMiddleware)({
      basePath
    }));
  } // adds custom user's middlewares


  if (customMiddlewares && customMiddlewares.length > 0) {
    customMiddlewares.forEach(customMiddleware => {
      middlewares.push(customMiddleware);
    });
  } // serves 304 responses if resource hasn't changed


  middlewares.push((0, _etagCacheMiddleware.createEtagCacheMiddleware)()); // adds etag headers for caching

  middlewares.push((0, _koaEtag.default)());

  if (fileWatcher) {
    // caches (transformed) file contents for faster response times
    middlewares.push((0, _responseCacheMiddleware.createResponseCacheMiddleware)({
      fileWatcher,
      rootDir,
      extraFileExtensions
    }));
  } // communicates with browser for reload or logging


  if (setupMessageChanel) {
    middlewares.push((0, _messageChannel.createMessageChannelMiddleware)({
      rootDir,
      appIndex
    }));
  } // watches served files


  middlewares.push((0, _watchServedFiles.createWatchServedFilesMiddleware)({
    rootDir,
    fileWatcher
  })); // compile code using babel and/or resolve module imports

  if (setupBabel || nodeResolve) {
    middlewares.push((0, _compileMiddleware.createCompileMiddleware)({
      rootDir,
      moduleDirectories,
      readUserBabelConfig,
      compatibilityMode,
      extraFileExtensions,
      customBabelConfig,
      babelExclude,
      babelModernExclude,
      nodeResolve,
      preserveSymlinks
    }));
  } // injects polyfills and shims for compatibility with older browsers


  if (setupTransformIndexHTML) {
    middlewares.push((0, _transformIndexHtml.createTransformIndexHTMLMiddleware)({
      compatibilityMode,
      appIndex,
      appIndexDir
    }));
  } // serves index.html for non-file requests for SPA routing


  if (setupHistoryFallback) {
    middlewares.push((0, _historyApiFallback.createHistoryAPIFallbackMiddleware)({
      appIndex,
      appIndexDir
    }));
  }

  if (watch) {
    (0, _setupBrowserReload.setupBrowserReload)({
      fileWatcher,
      watchDebounce
    });
  } // serve sstatic files


  middlewares.push((0, _koaStatic.default)(rootDir, {
    setHeaders(res) {
      res.setHeader('cache-control', 'no-cache');
    }

  }));
  return middlewares;
}